***********************************************************************************************************************

Steps to update SmartGit:-

start --> run --> appdata

C:\Users\mlahariya\AppData\Roaming\syntevo\SmartGit

Go inside the 7.1 folder & delete settings.xml, now reconfigure the SmartGit.

***********************************************************************************************************************

Soap Proxy Object:- Different phase/steps of acquiring a proxy object in web services are given below. 

There are many ways to consume Web Services.

1.The first way is to use a SOAP Proxy Client Object generated by the WSDL utility, 
and it provides programmers with their familiar object model that they can use to call methods provided by the 
generated proxy Interface.

2.The second way is to use HTTP-POST and HTTP-GET protocols.

3.The third way is to use a SOAP standard Request message that parses SOAP response messages 
with the help of the XMLHTTP COM object that is installed by the Microsoft XML Parser.

Proxy class serves as an intermediate between the client and the Web service.

***********************************************************************************************************************

Web Services Description Language (WSDL) is an XML based protocol for information exchange in decentralized and 
distributed environments. A WSDL document defines services as collections of network end points, or ports. 
A WSDL document uses the following elements in the definition of network services:

Types:- a container for data type definitions using some type system (such as XSD).
Message:- an abstract, typed definition of the data being communicated.
Operation:- an abstract description of an action supported by the service.
Port Type:- an abstract set of operations supported by one or more end points.
Binding:- a concrete protocol and data format specification for a particular port type.
Port:- a single end point defined as a combination of a binding and a network address.
Service:- a collection of related end points.

***********************************************************************************************************************

Consuming Web Service object:-

1.An instance of the proxy class. For e.g. ProxyClassName objproxy = new ProxyClassName();

2.Once the object is instantiated, then with the help of proxy object, this will make a call to the web service method. 
For e.g. objproxy.WebMethodName(any Parameter that has to send);

3.The proxy class marshals the parameter list and makes an HTTP request to the Web service sitting on Web Server.

4.The Web service unmarshals the incoming parameters, runs the method, and marshals the output parameters. 
These are sent back in an HTTP response.

5.The proxy class unmarshals the return parameters and passes back the result to the consumer.

***********************************************************************************************************************

Spring Boot:- Many Spring Boot developers always have their main class annotated with 

@Configuration 
@EnableAutoConfiguration 
@ComponentScan 

Since these annotations are so frequently used together (especially if you follow the best practices above), 
Spring Boot provides a convenient @SpringBootApplication alternative.

The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan 
with their default attributes:

***********************************************************************************************************************

@Component, @Repository,@Service and @Controllerannotations in place and after enabling automatic component scanning, 
spring will automatically import the beans into the container so you don’t have to define them explicitly with XML. 
These annotations are called Stereotype annotations as well.

@Component, @Repository, @Service and @Controller annotations:-

1.The @Component annotation marks a java class as a bean so the component-scanning mechanism of spring can pick it up 
and pull it into the application context. To use this annotation, apply it over class as below:

@Component
public class EmployeeDAOImpl implements EmployeeDAO {
    ...
}

2.Although above use of @Component is good enough but you can use more suitable annotation that provides 
additional benefits specifically for DAOs i.e. @Repositoryannotation. 

The @Repository annotation is a specialization of the @Componentannotation with similar use and functionality. 
In addition to importing the DAOs into the DI container, it also makes the unchecked exceptions (thrown from DAO methods) 
eligible for translation into Spring DataAccessException.

3.The @Service annotation is also a specialization of the component annotation. 
It doesn’t currently provide any additional behavior over the @Component annotation, but it’s a good idea to use @Service 
over @Component in service-layer classes because it specifies intent better. Additionally, tool support and 
additional behavior might rely on it in the future.

4.@Controller annotation marks a class as a Spring Web MVC controller. It too is a@Component specialization, 
so beans marked with it are automatically imported into the DI container. When you add the @Controller annotation to a class, 
you can use another annotation i.e. @RequestMapping; to map URLs to instance methods of a class.

@ComponentScan basePackages attribute takes package name[s] as input which will be search for to find any class annotated 
with Spring specific annotations.

***********************************************************************************************************************

Below are commonly used Spring annotation which makes a bean auto-detectable.

@Repository:- Used to mark a bean as DAO Component on persistence layer.
@Service:- Used to mark a bean as Service Component on business layer.
@Controller:- Used to mark a bean as Controller Component on Presentation layer.
@Configuration:- Used to mark a bean as Configuration Component.
@Component:- General purpose annotation, can be used as a replacement for above annotations.

Note that all above mentioned annotations are internally annotated with @Component, so indeed you can use @Component 
everywhere, but to keep the design & intention clean. It is advisable to use different annotation based on different 
conditions.

***********************************************************************************************************************

Spring Web Services:-

Spring Web Services aims to facilitate contract-first SOAP service development, allowing for the creation of flexible 
web services using one of the many ways to manipulate XML payloads.

The URL of the WSDL is formed in this format: 

http://[host]:[port]/[context]/[servlet]/[wsdl-name].wsdl.

Web services can be created using two ways: 

1.Top-down development 
2.Bottom-up development

Top-down web services development:-

1.Top-down Web services development involves creating a WSDL and then creating the Web service using the WSDL file. 
In top-down approach, first you design the implementation of the Web service by creating a WSDL file. 
You can then create the Web service skeleton Java classes from the wsdl, and add the required code. 

2.JAX-WS tool wsimport can be used for creating a top down web service.
The wsimport can create stubs from a wsdl. 

3.Top down approach is also called as contract first or WSDL first approach.

4.Most common in production scenarios.

Development tips:- Even in WSDL first approach, you can write a simple throw away java class, generate a WSDL and 
then start customizing it based on our need.

Bottom-up web services development:-

1.When creating a Web service using a bottom-up approach, first you write the java classes for the web service and 
then create the WSDL file and publish the web service. Although bottom-up Web service development may be faster
and easier, the top-down approach is the recommended way of creating a Web service. 

2.JAX-WS tool wsgen can be used for creating a bottoms up web service. 
The wsgen tool reads an existing web service implementation class (SIB) and generates the required JAX–WS portable 
artifacts for web service development and deployment.

3.Bottom up approach is also called as Service first or code first approach.

4.Ideal for learning web services.

***********************************************************************************************************************

Multiple ways are there to create rest full web service in java.

Like a SOAP service can be created using Axis, Axis2 and other implementations, also certain APIs - JAX-WS, JAX-RPC, 
JAXB etc. are available. 

Similarly for REST, JAX-RS is available and one reference implementation - Jersey. There are many implementations of 
the JAX-RS standard. Apart from Jersey, there is also Apache CXF and JBoss RESTeasy. List of Frameworks for creating 
RESTful services in Java are RESTEasy, Jersey, Retrofit, Spark, Dropwizard, Spring.

***********************************************************************************************************************

Web Service Essentials:-

https://www.youtube.com/watch?v=bfTmt_pUazU
http://www.ibm.com/developerworks/webservices/library/ws-tip-jaxwsrpc/index.html
https://dzone.com/articles/apache-cxf-vs-apache-axis-vs
http://stackoverflow.com/questions/11566609/difference-between-jax-ws-axis2-and-cxf
https://www.javacodegeeks.com/2014/02/creating-contract-first-web-services-with-spring-ws.html
http://stackoverflow.com/questions/1243247/difference-between-apache-cxf-and-axis/1245386#1245386
http://javatutorialguide.com/web-services/tutorial/different-types-of-webservices-in-java.php
http://www.ibm.com/developerworks/java/library/j-jws11/
http://www.ibm.com/developerworks/java/library/j-jws6/index.html
http://www.ibm.com/developerworks/java/library/j-jws10/index.html
http://www.ibm.com/developerworks/java/library/j-jws9/index.html
https://coderanch.com/wiki/659770/Wiki/Web-Services-Faq
http://www.beingjavaguys.com/2013/04/what-are-web-services-in-spring.html
https://www.safaribooksonline.com/library/view/java-web-services/9781449373856/ch04s04.html
http://www.wideskills.com/jax-ws/create-web-service-using-jax-ws
http://briansjavablog.blogspot.in/2013/01/spring-web-services-tutorial.html
http://www.javaworld.com/article/2073287/soa/secure-web-services.html
https://concentricsky.com/blog/article/implementing-ws-security-cxf-wsdl-first-web-service
http://www.thoughts-on-java.org/generate-your-jaxb-classes-in-second/
http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/reference/htmlsingle/#server-atEndpoint-methods
http://www.java2blog.com/2013/03/web-service-tutorial.html
https://angelozerr.wordpress.com/2011/08/24/jaxwscxf_step2/
https://spring.io/guides/gs/consuming-web-service/
https://docs.oracle.com/cd/E14004_01/books/EAI2/EAI2_WebServices26.html
http://www.thejavageek.com/2015/01/28/using-wsimport-command-generate-web-service-client/
http://stackoverflow.com/questions/20137422/wsimport-wsdl-why-generating-class-files-and-not-java-files
https://www.mkyong.com/webservices/jax-ws/jax-ws-wsimport-tool-example/
https://jax-ws.java.net/2.2.6/docs/ch04.html
https://isurues.wordpress.com/2009/10/01/how-to-generate-your-jaxws-service-from-a-wsdl-using-wsimport/
http://reference1.mapinfo.com/software/spectrum/lim/8_0/services/Spatial/source/Development/gettingstarted/accessing/java.html

***********************************************************************************************************************

Spring Boot Soap Ws Topdown:-

https://spring.io/guides/gs/producing-web-service/
http://www.concretepage.com/spring-4/spring-4-soap-web-service-producer-consumer-example-with-tomcat
https://www.mkyong.com/webservices/jax-ws/jax-ws-spring-integration-example/
http://briansjavablog.blogspot.com/2013/01/spring-web-services-tutorial.html
https://www.javacodegeeks.com/2014/02/creating-contract-first-web-services-with-spring-ws.html
http://javahash.com/spring-web-services-soap-services-tutorial/
https://www.genuitec.com/products/myeclipse/learning-center/spring/import-and-use-a-soap-web-service-tutorial/
http://justcompiled.blogspot.in/2010/09/building-web-service-with-spring-ws.html
http://codegur.com/26498278/endpointnotfound-exception-for-spring-boot-soap-web-service
http://techdive.in/spring/spring-web-service
http://projects.spring.io/spring-ws/
http://javahash.com/spring-web-services-soap-services-tutorial/
https://spring.io/guides/gs/producing-web-service/
http://briansjavablog.blogspot.in/2013/01/spring-web-services-tutorial.html
http://www.java2blog.com/2013/03/soap-web-service-tutorial.html
http://blog.cloudexult.com/2015/04/05/how-to-create-soap-webservice-using-spring-ws/
http://spring-webservice-2-step-by-step.blogspot.in/2011/12/spring-web-services-20-step-by-step.html
http://springtips.blogspot.in/2007/07/step-by-step-spring-ws.html
http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/reference/htmlsingle/#server-atEndpoint-methods

***********************************************************************************************************************

Web Service Client:-

http://stackoverflow.com/questions/15948927/working-soap-client-example
https://www.mkyong.com/webservices/jax-ws/jax-ws-soap-handler-in-client-side/
https://spring.io/guides/gs/consuming-web-service/
http://www.connect2java.com/tutorials/hibernate/clear-evict-and-close-methods-in-hibernate/
http://www.javajee.com/lab-creating-a-soap-web-service-bottoms-up-using-java-se-endpoint-publisher
http://www.codeproject.com/Articles/867391/JAX-WS-Using-Apache-CXF-to-Create-a-Bottom-Up-Web
http://www.benchresources.net/apache-cxf-jax-ws-soap-based-web-service-using-bottom-up-approach/
http://www.wideskills.com/jax-ws/create-web-service-using-jax-ws
http://www.wideskills.com/jax-ws-tutorial

***********************************************************************************************************************

REST Web Service:-

https://crunchify.com/how-to-build-restful-service-with-java-using-jax-rs-and-jersey/
http://docs.oracle.com/javaee/6/tutorial/doc/giqsx.html
https://www.quora.com/What-are-the-different-ways-to-create-rest-API-in-java
http://www.bhaveshthaker.com/13/introduction-developing-implementing-restful-web-services-in-java/
http://www.tutorialspoint.com/restful/restful_quick_guide.htm
https://dzone.com/articles/restful-web-services-java
http://cxf.apache.org/docs/restful-services.html

***********************************************************************************************************************